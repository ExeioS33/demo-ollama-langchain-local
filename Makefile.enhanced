# Faire une requête avec une image
image-query: 
	@read -p "Chemin de l'image de requête: " path; \
	$(UV_RUN) enhanced_multimodal_rag_demo.py --image-query $$path --model $(MODEL) --db-path $(DB_PATH) --collection $(COLLECTION) $(if $(filter true,$(GPU)),--use-gpu,) --similarity-threshold $(SIMILARITY) --reranker $(RERANKER)

# Faire une requête combinée texte-image
combined-query:
	@read -p "Votre question: " question; \
	read -p "Chemin de l'image de requête: " path; \
	$(UV_RUN) enhanced_multimodal_rag_demo.py --query "$$question" --image-query $$path --combined-query --model $(MODEL) --db-path $(DB_PATH) --collection $(COLLECTION) $(if $(filter true,$(GPU)),--use-gpu,) --similarity-threshold $(SIMILARITY) --reranker $(RERANKER)

# Exécuter le script de test de requête combinée texte-image
test-combined-query:
	@read -p "Chemin de l'image de requête: " path; \
	$(UV_RUN) test_combined_query.py --image $$path --model $(MODEL) --db-path $(DB_PATH) --collection $(COLLECTION)

# Faire une requête sans reranking (pour comparer) 

# Aide
help:
	@echo "Commandes disponibles pour le système RAG multimodal amélioré (avec UV):"
	@echo "  make install             : Installer les dépendances avec UV"
	@echo "  make install-no-compile  : Installer les dépendances sans compilation"
	@echo "  make check-deps          : Vérifier que les dépendances principales sont installées"
	@echo "  make test-installation   : Créer et exécuter un script de test pour vérifier l'installation"
	@echo "  make install-system-deps-debian : Installer les dépendances système (Ubuntu/Debian)"
	@echo "  make install-system-deps-redhat : Installer les dépendances système (CentOS/RHEL/Fedora)"
	@echo "  make start-ollama        : Démarrer Ollama en arrière-plan"
	@echo "  make download-models     : Télécharger les modèles nécessaires"
	@echo "  make reset-db            : Réinitialiser la base de données FAISS"
	@echo "  make migrate             : Migrer depuis une base ChromaDB existante"
	@echo "  make add-document        : Ajouter un document (PDF, image, texte)"
	@echo "  make query               : Faire une requête textuelle"
	@echo "  make image-query         : Faire une requête avec une image"
	@echo "  make combined-query      : Faire une requête combinée texte-image"
	@echo "  make test-combined-query : Tester le script dédié aux requêtes combinées"
	@echo "  make query-no-rerank     : Faire une requête sans reranking"
	@echo "  make set-model           : Changer le modèle LLM"
	@echo "  make toggle-gpu          : Activer/désactiver le mode GPU"
	@echo "  make set-similarity      : Modifier le seuil de similarité"
	@echo "  make set-reranker        : Changer le modèle de reranking"
	@echo "  make config-info         : Afficher la configuration actuelle"
	@echo "  make compare-performance : Comparer les performances (original vs amélioré)"
	@echo "  make demo                : Exécuter une démonstration complète"

# Inclure les fichiers de configuration si disponibles
-include .model_config
-include .gpu_config
-include .similarity_config
-include .reranker_config

.PHONY: install install-no-compile check-deps check-ollama start-ollama download-models reset-db migrate add-document query image-query query-no-rerank set-model toggle-gpu set-similarity set-reranker config-info compare-performance install-system-deps-debian install-system-deps-redhat demo help create-test-script test-installation combined-query test-combined-query 

# Démo complète
demo: check-deps
	@echo "\n======= DÉMO DU SYSTÈME RAG MULTIMODAL AMÉLIORÉ =======\n"
	@echo "Configuration: Model=$(MODEL), GPU=$(GPU), Similarité=$(SIMILARITY)"
	@echo "\n1. Ajout d'un document texte de test..."
	@echo "Ceci est un document de test pour démontrer le système RAG multimodal amélioré avec FAISS et reranking." > test_document.txt
	$(UV_RUN) enhanced_multimodal_rag_demo.py --add-document test_document.txt --model $(MODEL) --db-path $(DB_PATH) --collection $(COLLECTION) $(if $(filter true,$(GPU)),--use-gpu,) --similarity-threshold $(SIMILARITY)
	
	@echo "\n2. Interrogation du système..."
	$(UV_RUN) enhanced_multimodal_rag_demo.py --query "Explique ce qu'est le système RAG?" --model $(MODEL) --db-path $(DB_PATH) --collection $(COLLECTION) $(if $(filter true,$(GPU)),--use-gpu,) --similarity-threshold $(SIMILARITY)
	
	@echo "\n3. Comparaison avec/sans reranking..."
	@echo "\n=== AVEC RERANKING ==="
	$(UV_RUN) enhanced_multimodal_rag_demo.py --query "Que démontre ce document?" --model $(MODEL) --db-path $(DB_PATH) --collection $(COLLECTION) $(if $(filter true,$(GPU)),--use-gpu,) --similarity-threshold $(SIMILARITY)
	@echo "\n=== SANS RERANKING ==="
	$(UV_RUN) enhanced_multimodal_rag_demo.py --query "Que démontre ce document?" --model $(MODEL) --db-path $(DB_PATH) --collection $(COLLECTION) $(if $(filter true,$(GPU)),--use-gpu,) --similarity-threshold $(SIMILARITY) --no-reranking
	
	@echo "\n4. Création d'une image de test pour la requête combinée..."
	@echo "RAG" | convert -background white -fill black -font Arial -pointsize 72 -size 400x200 -gravity center label:@- test_image.png
	$(UV_RUN) enhanced_multimodal_rag_demo.py --add-document test_image.png --description "Une image avec le texte 'RAG'" --model $(MODEL) --db-path $(DB_PATH) --collection $(COLLECTION) $(if $(filter true,$(GPU)),--use-gpu,) --similarity-threshold $(SIMILARITY)
	
	@echo "\n5. Requête combinée texte-image..."
	$(UV_RUN) enhanced_multimodal_rag_demo.py --query "Explique le contenu de cette image" --image-query test_image.png --combined-query --model $(MODEL) --db-path $(DB_PATH) --collection $(COLLECTION) $(if $(filter true,$(GPU)),--use-gpu,) --similarity-threshold $(SIMILARITY)
	
	@echo "\n✅ Démo terminée - Nettoyage..."
	rm test_document.txt test_image.png
	@echo "✅ Fichiers de test supprimés" 